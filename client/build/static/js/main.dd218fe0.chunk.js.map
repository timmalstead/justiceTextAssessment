{"version":3,"sources":["globalStyle.js","reducerAndTypes.js","hooks/useFetch.js","hooks/useLazyLoad.js","hooks/useVisibleParagraphs.js","components/Search/style.js","components/Search/index.js","components/TextItem/style.js","components/TextItem/index.js","components/Paragraph/style.js","components/Paragraph/index.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","AppContainer","styled","div","Loader","fetchReducer","state","action","type","paragraphs","concat","fetching","useFetch","dispatch","counter","useState","isFirstCall","setIsFirstCall","savedListOfPromises","setSavedListOfPromises","useEffect","a","fetch","response","json","list","listOfPromises","map","id","then","data","Promise","all","slice","length","fetchData","useLazyLoad","scrollRef","setCounter","scrollObserver","useCallback","node","IntersectionObserver","entries","forEach","element","isIntersecting","prevNum","observe","current","useVisibleParagraphs","nodeListIdent","paragraphData","setVisibleParagraphs","paragraphsRef","useRef","paragraphObserver","entry","paragraphId","target","prevState","Set","filter","document","querySelectorAll","SearchHolder","Input","input","Search","searchInput","setSearchInput","placeholder","value","onChange","Text","span","highlight","memo","visible","info","start","contentEditable","suppressContentEditableWarning","text","Article","p","Paragraph","i","row","visibleParagraphs","idRef","v4","includes","className","textitem","j","search","key","App","useReducer","paragraphDispatch","setValue","paragraphCounter","setParagraphCounter","bottomBoundaryRef","setInterval","Math","floor","random","ref","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dd218fe0.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from \"styled-components\"\n\nconst GlobalStyle = createGlobalStyle`\n    * {\n        margin: 0;\n        padding: 0;\n    }\n\n    body {\n        width: 1400px;\n        height:100%;\n        margin: auto;\n        font-family: Arial,Helvetica,sans-serif;\n    }\n`\nexport default GlobalStyle\n\nexport const AppContainer = styled.div`\n  text-align: center;\n`\n\nexport const Loader = styled.div`\n  height: 1000px;\n  visibility: hidden;\n`\n","export const STACK_PARAGRAPHS = \"STACK_PARAGRAPHS\"\n\nexport const FETCHING_PARAGRAPHS = \"FETCHING_PARAGRAPHS\"\n\nexport const fetchReducer = (state, action) => {\n  switch (action.type) {\n    case STACK_PARAGRAPHS:\n      return {\n        ...state,\n        paragraphs: state.paragraphs.concat(action.paragraphs),\n      }\n    case FETCHING_PARAGRAPHS:\n      return { ...state, fetching: action.fetching }\n    default:\n      return state\n  }\n}\n","import { useEffect, useState } from \"react\"\nimport { STACK_PARAGRAPHS, FETCHING_PARAGRAPHS } from \"../reducerAndTypes\"\n\nconst useFetch = (dispatch, counter) => {\n  const [isFirstCall, setIsFirstCall] = useState(true)\n  const [savedListOfPromises, setSavedListOfPromises] = useState([])\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        dispatch({ type: FETCHING_PARAGRAPHS, fetching: true })\n        if (isFirstCall) {\n          setIsFirstCall(false)\n          const response = await fetch(`http://localhost:8080/api/dataIdList`)\n          const list = await response.json()\n          const listOfPromises = list.map((id) =>\n            fetch(`http://localhost:8080/api/dataItem/${id}`).then((data) =>\n              data.json()\n            )\n          )\n          setSavedListOfPromises(listOfPromises)\n          const paragraphs = await Promise.all(\n            listOfPromises.slice(0, counter + 1)\n          )\n          dispatch({ type: STACK_PARAGRAPHS, paragraphs })\n        } else {\n          if (savedListOfPromises.length) {\n            const paragraphs = await Promise.all(\n              savedListOfPromises.slice(counter - 1, counter + 1)\n            )\n            dispatch({ type: STACK_PARAGRAPHS, paragraphs })\n          }\n        }\n        dispatch({ type: FETCHING_PARAGRAPHS, fetching: false })\n      } catch (err) {\n        dispatch({ type: FETCHING_PARAGRAPHS, fetching: false })\n        return err\n      }\n    }\n\n    fetchData()\n  }, [\n    dispatch,\n    counter,\n    isFirstCall,\n    setIsFirstCall,\n    savedListOfPromises,\n    setSavedListOfPromises,\n  ])\n}\n\nexport default useFetch\n","import { useEffect, useCallback } from \"react\"\n\nconst useLazyLoad = (scrollRef, setCounter) => {\n  const scrollObserver = useCallback(\n    (node) =>\n      new IntersectionObserver((entries) =>\n        entries.forEach((element) => {\n          if (element.isIntersecting) {\n            setCounter((prevNum) => (prevNum += 2))\n          }\n        })\n      ).observe(node),\n    [setCounter]\n  )\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollObserver(scrollRef.current)\n    }\n  }, [scrollObserver, scrollRef])\n}\n\nexport default useLazyLoad\n","import { useEffect, useCallback, useRef } from \"react\"\n\nconst useVisibleParagraphs = (\n  nodeListIdent,\n  paragraphData,\n  setVisibleParagraphs\n) => {\n  const paragraphsRef = useRef(null)\n\n  const paragraphObserver = useCallback(\n    (node) => {\n      const intObs = new IntersectionObserver((entries) =>\n        entries.forEach((entry) => {\n          const paragraphId = entry.target.id\n          if (entry.isIntersecting)\n            setVisibleParagraphs((prevState) => [\n              ...new Set([...prevState, paragraphId]),\n            ])\n          else\n            setVisibleParagraphs((prevState) =>\n              prevState.filter((id) => id !== paragraphId)\n            )\n        })\n      )\n      intObs.observe(node)\n    },\n    [setVisibleParagraphs]\n  )\n\n  useEffect(() => {\n    paragraphsRef.current = document.querySelectorAll(nodeListIdent)\n    if (paragraphsRef.current) {\n      paragraphsRef.current.forEach((node) => paragraphObserver(node))\n    }\n  }, [\n    paragraphObserver,\n    paragraphsRef,\n    paragraphData.paragraphs,\n    nodeListIdent,\n  ])\n}\n\nexport default useVisibleParagraphs\n","import styled from \"styled-components\"\n\nexport const SearchHolder = styled.div`\n  background-color: #6320ee;\n  width: 12em;\n  padding: 0.5em 1em;\n  position: fixed;\n  left: 0;\n  top: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  border-radius: 0 0 3em 0;\n  color: white;\n\n  > * {\n    margin: 0 0 0.5em 0;\n  }\n`\n\nexport const Input = styled.input`\n  width: 10em;\n  border-radius: 0.5em;\n  padding: 0.5em;\n  outline: none;\n  border: none;\n  transition: transform 0.25s linear;\n  color: #6320ee;\n\n  :focus {\n    transform: scale(1.1);\n  }\n\n  ::placeholder {\n    color: #6320ee;\n  }\n`\n","import React from \"react\"\nimport { SearchHolder, Input } from \"./style\"\n\nconst Search = ({ searchInput, setSearchInput }) => {\n  const handleChange = ({ target }) => setSearchInput(target.value)\n\n  return (\n    <SearchHolder>\n      <h2>JT Online Book</h2>\n      <Input\n        type=\"text\"\n        placeholder=\"Search Text\"\n        value={searchInput}\n        onChange={handleChange}\n      />\n    </SearchHolder>\n  )\n}\n\nexport default Search\n","import styled from \"styled-components\"\n\nconst Text = styled.span`\n  background-color: ${({ highlight }) => (highlight ? \"#fdbcd4\" : null)};\n`\n\nexport default Text\n","import React, { memo } from \"react\"\nimport Text from \"./style\"\n\nconst TextItem = ({ data, value, visible }) => (\n  <Text\n    highlight={visible ? ((data.info.start / 2000) | 0) % value === 0 : null}\n    contentEditable={true}\n    suppressContentEditableWarning={true}\n  >\n    {`${data.text} `}\n  </Text>\n)\n\nexport default memo(TextItem)\n","import styled from \"styled-components\"\n\nconst Article = styled.p`\n  width: 65%;\n  margin: 0.75em auto 0 auto;\n  overflow-wrap: break-word;\n  height: 370px;\n  font-family: Georgia, \"Times New Roman\", Times, serif;\n  font-size: 15px;\n  font-weight: 300;\n`\n\nexport default Article\n","import React, { useRef } from \"react\"\nimport TextItem from \"../TextItem\"\nimport Article from \"./style\"\nimport { v4 } from \"uuid\"\n\nconst Paragraph = ({ i, row, value, searchInput, visibleParagraphs }) => {\n  const idRef = useRef(v4()).current\n\n  const visible = visibleParagraphs.includes(idRef) ? true : false\n\n  return (\n    <Article className={\"full-paragraph\"} id={idRef} visible={visible}>\n      {row.length\n        ? row.map((textitem, j) => {\n            if (\n              searchInput.length > 0 &&\n              textitem.text.search(searchInput) === -1\n            ) {\n              return null\n            }\n\n            return (\n              <TextItem\n                key={`${i}${j}`}\n                value={value}\n                data={textitem}\n                visible={visible}\n              />\n            )\n          })\n        : null}\n    </Article>\n  )\n}\n\nexport default Paragraph\n","import React, { useEffect, useState, useReducer, useRef } from \"react\"\nimport { useFetch, useLazyLoad, useVisibleParagraphs } from \"./hooks\"\nimport { fetchReducer } from \"./reducerAndTypes\"\nimport { AppContainer, Loader } from \"./globalStyle\"\nimport Search from \"./components/Search\"\nimport Paragraph from \"./components/Paragraph\"\n\nconst INTERVAL_TIME = 2000\n\nconst App = () => {\n  const [paragraphData, paragraphDispatch] = useReducer(fetchReducer, {\n    paragraphs: [],\n    fetching: true,\n  })\n  const [value, setValue] = useState(0)\n  const [searchInput, setSearchInput] = useState(\"\")\n  const [paragraphCounter, setParagraphCounter] = useState(1)\n  const [visibleParagraphs, setVisibleParagraphs] = useState([])\n  const bottomBoundaryRef = useRef(null)\n\n  /** DO NOT CHANGE THE FUNCTION BELOW */\n  useEffect(() => {\n    setInterval(() => {\n      // Find random bucket of words to highlight\n      setValue(Math.floor(Math.random() * 10))\n    }, INTERVAL_TIME)\n  }, [])\n  /** DO NOT CHANGE THE FUNCTION ABOVE */\n\n  useFetch(paragraphDispatch, paragraphCounter)\n  useLazyLoad(bottomBoundaryRef, setParagraphCounter)\n  useVisibleParagraphs(\".full-paragraph\", paragraphData, setVisibleParagraphs)\n\n  return (\n    <AppContainer>\n      <Search searchInput={searchInput} setSearchInput={setSearchInput} />\n      <div>\n        {paragraphData.paragraphs.length\n          ? paragraphData.paragraphs.map((row, i) => (\n              <Paragraph\n                key={`p${i}`}\n                i={i}\n                row={row}\n                value={value}\n                searchInput={searchInput}\n                visibleParagraphs={visibleParagraphs}\n              />\n            ))\n          : null}\n      </div>\n      <Loader ref={bottomBoundaryRef} />\n    </AppContainer>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport GlobalStyle from \"./globalStyle\"\nimport App from \"./App\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <GlobalStyle />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}